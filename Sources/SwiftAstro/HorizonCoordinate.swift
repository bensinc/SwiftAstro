//
//  HorizonCoordinate.swift
//  
//
//  Created by Ben Sinclair on 1/21/21.
//

import Foundation

///  ðŸŒŽ Represents a set of horizon coordinates
class HorizonCoordinate : Equatable, CustomStringConvertible {
    var altitude: HMS
    var azimuth: HMS
    
    public var description: String { return "HorizonCoordinate: alt: \(altitude.hours):\(altitude.minutes):\(altitude.seconds), az: \(azimuth.hours):\(azimuth.minutes):\(azimuth.seconds)" }
    
    init(altitude: HMS, azimuth: HMS) {
        self.altitude = altitude
        self.azimuth = azimuth
    }
    
    //MARK: Equatable
    
    static func == (lhs: HorizonCoordinate, rhs: HorizonCoordinate) -> Bool {
        return lhs.altitude == rhs.altitude && lhs.azimuth == rhs.azimuth
    }
    
    func toEquatorialCoordinate(date: AstroDate, latitude: Double) -> EquatorialCoordinate {
        let Ï† = latitude
        
        let A = self.azimuth.toDecimal()
        
        let a = self.altitude.toDecimal()
        
        let sinÎ´ = sin(a.degrees) * sin(Ï†.degrees) + cos(a.degrees) * cos(Ï†.degrees) * cos(A.degrees)
        
        let Î´ = asin(sinÎ´).rad
        
        let cosH = (sin(a.degrees) - sin(Ï†.degrees) * sin(Î´.degrees)) / (cos(Ï†.degrees) * cos(Î´.degrees))
        
        var H = acos(cosH).rad
        
        let sinA = sin(A.degrees)
        if (sinA > 0) {
            H = 360.0 - H
        }
        
        H /= 15.0
        
        let hmsH = HMS(decimal: H)
        let hmsÎ´ = HMS(decimal: Î´)
        
        let lst = date.decimalTime()
        var Î± = lst - H
        if (Î± < 0) {
            Î± += 24
        }
        let hmsÎ± = HMS(decimal: Î±)
        
        return(EquatorialCoordinate(rightAscension: hmsÎ±, declination: hmsÎ´))
    }
    
}
